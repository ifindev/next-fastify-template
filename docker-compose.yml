version: '3.8'

services:
  client:
    build:
      context: ./client
      dockerfile: Dockerfile
    image: next-app:latest
    ports:
      - "3000:3000"
    volumes:
      - ./client:/app
      - /app/node_modules
    environment:
      - NEXT_PUBLIC_API_URL=http://server:3001 # Use service name instead of localhost
    depends_on:
      server:
        condition: service_healthy

  server:
    build:
      context: ./server
      dockerfile: Dockerfile
    image: fastify-app:latest
    ports:
      - "3001:3001"
    volumes:
      - ./server:/app
      - /app/node_modules
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/librarydb?schema=public
      - JWT_SECRET=${JWT_SECRET:-your-secret-key-change-in-production} # Use env var with fallback
      - JWT_EXPIRES_IN=1d
      - S3_ENDPOINT=${S3_ENDPOINT}
      - S3_REGION=${S3_REGION}
      - S3_ACCESS_KEY=${S3_ACCESS_KEY}
      - S3_SECRET_KEY=${S3_SECRET_KEY}
      - S3_BUCKET_NAME=${S3_BUCKET_NAME}
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  postgres:
    image: postgres:14-alpine
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres} # Use env var
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres} # Use env var
      - POSTGRES_DB=librarydb
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      timeout: 5s
      retries: 3

volumes:
  postgres-data: